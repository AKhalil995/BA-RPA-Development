{"model":{"path":"Main.xaml","arguments":[{"name":"in_OrchestratorQueueName","type":"System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e","direction":"In"},{"name":"in_OrchestratorQueueFolder","type":"System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e","direction":"In"}],"outline":{"displayName":"General Business Process","nodeName":"StateMachine","annotation":"[Process title]\n[Process description]\n[Additional information (e.g., author, contact information and applications involved and required external setup)]","items":[{"displayName":"Initialization","nodeName":"State","annotation":"Read configuration file and initialize applications used in the process.","items":[{"displayName":"Try initializing settings and applications","nodeName":"TryCatch","items":[{"displayName":"Load configurations and open applications","nodeName":"Sequence","items":[{"displayName":"Assign SystemException (initialization)","nodeName":"Assign","items":[{"nodeName":"CSharpReference"},{"nodeName":"CSharpValue"}]},{"displayName":"If first run, read local configuration file","nodeName":"If","annotation":"An uninitialized Config dictionary indicates that it is the first run of the process.","items":[{"nodeName":"CSharpValue"},{"displayName":"First run","nodeName":"Sequence","items":[{"displayName":"Log Message screen resolution","nodeName":"LogMessage"},{"displayName":"Invoke InitAllSettings workflow","nodeName":"InvokeWorkflowFile"},{"displayName":"If in_OrchestratorQueueName is specified","nodeName":"If","annotation":"Overwrite queue name from in configuration file in case the argument in_OrchestratorQueueName is specified.\nThis provides backward compatibility with \u003C 2018.3."},{"displayName":"If in_OrchestratorQueueFolder is specified","nodeName":"If","annotation":"Overwrite folder name from in configuration file in case the argument in_OrchestratorQueueFolder is specified.\nThis provides backward compatibility with \u003C 2018.3."},{"displayName":"Invoke KillAllProcesses workflow","nodeName":"InvokeWorkflowFile","annotation":"Kills all Windows processes representing applications used in this business process to assure that the execution starts in a clean state.\nSince the applications are assumed to be already closed, CloseAllApplications is skipped and just KillAllProcess is invoked."},{"displayName":"Add Log Fields (BusinessProcessName)","nodeName":"AddLogFields","annotation":"Add the process name to the logs generated after this point. \nThis log field can be used to create reports and visualizations about the process."}]},{"displayName":"Else","nodeName":"Sequence"}]},{"displayName":"If maxConsecutiveSystemExceptions exceeded","nodeName":"If","annotation":"If MaxConsecutiveSystemExceptions number was reached, throw Exception at initialization and go to End Process state, thus finalizing the execution. \nIf MaxConsecutiveSystemExceptions is 0, then any number of consecutive System Exceptions is allowed.","items":[{"nodeName":"CSharpValue"},{"displayName":"Throw Consecutive Exceptions exceeded","nodeName":"Throw"},{"displayName":"Else","nodeName":"Sequence"}]},{"displayName":"Invoke InitAllApplications workflow","nodeName":"InvokeWorkflowFile","items":[{"nodeName":"CSharpValue"}]}]},{"nodeName":"Catch","items":[{"displayName":"Assign SystemException","nodeName":"Assign","annotation":"Failures during the initialization are considered system exceptions and lead to the End Process state, thus finalizing the execution."}]},{"displayName":"Finally","nodeName":"Sequence"}]},{"displayName":"Successful","nodeName":"Transition","items":[{"displayName":"Get Transaction Data","nodeName":"State","annotation":"Get the next transaction to be processed.","items":[{"displayName":"Retrieve Data","nodeName":"Sequence","annotation":"Retrieve a new transaction data to be processed.\nThe TransactionNumber variable holds the current transaction number and incrementing this variable makes the framework retrieve the next transaction. If the framework is retrying a failed transaction, this variable is not incremented until the maximum number of retry attempts is reached.","items":[{"displayName":"Check Stop Signal","nodeName":"ShouldStop"},{"displayName":"Should Stop or Get Next","nodeName":"If"}]},{"displayName":"New Transaction","nodeName":"Transition","items":[{"displayName":"Process Transaction","nodeName":"State","annotation":"Process a single transaction. \nThe result of the processing can be: 1) Success, 2) Business Exception, 3) System Exception. \nIn the case of a system exception, the transaction can be automatically retried."},{"displayName":"Log message (New transaction retrieved)","nodeName":"LogMessage"},{"nodeName":"CSharpValue"}]},{"displayName":"No Data","nodeName":"Transition","annotation":"This is a simple mecanism to stop the process.\nIn reallife scenario you can stop the process when there is no more data to process or on a schedule.","items":[{"displayName":"End Process","nodeName":"State","annotation":"End process and close all applications used."},{"displayName":"Log message (No more transations available)","nodeName":"LogMessage"},{"nodeName":"CSharpValue"}]}]},{"displayName":"Comment (default transition)","nodeName":"Comment"},{"nodeName":"CSharpValue"}]},{"displayName":"System Exception (failed initialization)","nodeName":"Transition","items":[{"displayName":"Log Message (initialization failure)","nodeName":"LogMessage","items":[{"nodeName":"CSharpValue"}]},{"nodeName":"CSharpValue"}]}]}]}},"lastModified":"2025-10-26T22:44:26.8498264Z"}