{"model":{"path":"Framework/SetTransactionStatus.xaml","arguments":[{"name":"in_BusinessException","type":"UiPath.Core.BusinessRuleException, UiPath.System.Activities, Version=25.10.0.0, Culture=neutral, PublicKeyToken=null","direction":"In","typeDefinitions":"namespace UiPath.Core { class BusinessRuleException\r\n{\r\nMethodBase TargetSite;\r\nstring Message;\r\nIDictionary Data;\r\nException InnerException;\r\nstring HelpLink;\r\nstring Source;\r\nint HResult;\r\nstring StackTrace;\r\n}\r\n}"},{"name":"in_Config","type":"System.Collections.Generic.Dictionary\u00602[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e","direction":"In"},{"name":"in_TransactionItem","type":"UiPath.Core.QueueItem, UiPath.System.Activities, Version=25.10.0.0, Culture=neutral, PublicKeyToken=null","direction":"In","typeDefinitions":"namespace UiPath.Core { class QueueItem\r\n{\r\nlong? Id;\r\nstring Progress;\r\nDictionary\u003Cstring, object\u003E SpecificContent;\r\nstring Reference;\r\nstring QueueName;\r\nint RetryNo;\r\nQueueItemStatus Status;\r\nstring LastProcessingOn;\r\nGuid ItemKey;\r\nlong QueueDefinitionId;\r\nstring AssignedTo;\r\nQueueItemPriority Priority;\r\nbyte[] RowVersion;\r\nProcessingException ProcessingException;\r\nDateTime? StartTransactionTime;\r\nstring ReviewStatus;\r\nDictionary\u003Cstring, object\u003E Output;\r\nDateTime? DueDate;\r\nDateTime? DeferDate;\r\nstring ParentOperationId;\r\nGuid? UniqueKey;\r\n}\r\nenum QueueItemStatus\r\n{\r\nNew,\r\nInProgress,\r\nFailed,\r\nSuccessful,\r\nAbandoned,\r\nRetried,\r\nDeleted,\r\n}\r\nenum QueueItemPriority\r\n{\r\nHigh,\r\nNormal,\r\nLow,\r\n}\r\nclass ProcessingException\r\n{\r\nstring Reason;\r\nstring Details;\r\nProcessingExceptionType Type;\r\nstring AssociatedImageFilePath;\r\nlong Id;\r\nDateTime? CreationTime;\r\n}\r\n}"},{"name":"io_RetryNumber","type":"System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e","direction":"InOut"},{"name":"io_TransactionNumber","type":"System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e","direction":"InOut"},{"name":"in_TransactionField1","type":"System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e","direction":"In"},{"name":"in_TransactionField2","type":"System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e","direction":"In"},{"name":"in_TransactionID","type":"System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e","direction":"In"},{"name":"in_SystemException","type":"System.Exception, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e","direction":"In"},{"name":"io_ConsecutiveSystemExceptions","type":"System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e","direction":"InOut"}],"outline":{"displayName":"Set Transaction Status","nodeName":"Flowchart","annotation":"Set and log the transaction\u0027s status along with extra log fields. \nThere can be three possible statuses: Success, Business Exception and System Exception.\n\nBusiness Rule Exception characterizes an irregular situation according to the process\u0027s rules and prevents the transaction to be processed. The transaction is not retried in this case, since the result will be the same until the problem that causes the exception is solved.\nFor example, it can be considered a BusinessRuleException if a process expects to read an email\u0027s attachment, but the sender didn\u0027t attach any file. In this case, immediate retries of the transaction will not yield a different result.\n\nOn the other hand, system exceptions are characterized by exceptions whose types are different than BusinessRuleException. When this kind of exception happens, the transaction item can be retried after closing and reopening the applications involved in the process. The rationale behind this is that the exception was caused by a problem in the applications, which might be solved by restarting them.\n\nIf Orchestrator queues are the source of transactions, the Set Transaction Status activity is used to update the status. In addition, the retry mechanism is also implemented by Orchestrator.\n\nIf Orchestrator queues are not used, the status can be set, for example, by writing to a specific column in a spreadsheet. In such cases, the retry mechanism is covered by the framework and the number of retries is defined in the configuration file.\n\nAt the end, io_TransactionNumber is incremented, which makes the framework get the next transaction to be processed.","items":[{"displayName":"Is successful?","nodeName":"FlowDecision","items":[{"nodeName":"CSharpValue"},{"displayName":"Success","nodeName":"Sequence","annotation":"If the transaction item is processed without any exception, its status is updated as Successful.","items":[{"displayName":"If TransactionItem is a QueueItem (Success)","nodeName":"If","items":[{"nodeName":"CSharpValue"},{"displayName":"Retry Set Transaction Status (Success)","nodeName":"RetryScope"}]},{"displayName":"Log Success with additional logging fields","nodeName":"Sequence","annotation":"Includes custom log fields to the log message.\nThey are removed after logging to prevent duplicated status messages about a single transaction.","items":[{"displayName":"Add transaction log fields (Success)","nodeName":"AddLogFields","items":[{"nodeName":"CSharpValue"},{"nodeName":"CSharpValue"},{"nodeName":"CSharpValue"},{"nodeName":"CSharpValue"}]},{"displayName":"Log Message (Success)","nodeName":"LogMessage","items":[{"nodeName":"CSharpValue"},{"nodeName":"CSharpValue"}]},{"displayName":"Remove transaction log fields (Success)","nodeName":"RemoveLogFields"}]}]},{"displayName":"Increment transaction index and reset retries","nodeName":"Sequence","items":[{"displayName":"Assign io_TransactionNumber","nodeName":"Assign","annotation":"Increment the TransactionNumber to get the next transaction to be processed."},{"displayName":"Assign io_RetryNumber","nodeName":"Assign","annotation":"Reset the counter of retries to allow the next transaction to be retried the correct amount of times."},{"displayName":"Assign io_ConsecutiveSystemExceptions","nodeName":"Assign","annotation":"Reset the counter of consecutive system exceptions."}]},{"displayName":"Is Business Exception?","nodeName":"FlowDecision","items":[{"nodeName":"CSharpValue"},{"displayName":"Business Exception","nodeName":"Sequence","annotation":"If a BussinessRuleException is thrown during the process, the transaction item\u0027s status is updated as Failed (Exception Type: Business).\n","items":[{"displayName":"If TransactionItem is a QueueItem (Business Exception)","nodeName":"If","items":[{"displayName":"Retry Set Transaction Status (Business Exception)","nodeName":"RetryScope"}]},{"displayName":"Log business exception with additional logging fields","nodeName":"Sequence","annotation":"Includes custom log fields to the log message.\nThey are removed after logging to prevent duplicated status messages about a single transaction.","items":[{"displayName":"Add transaction log fields (Business Exception)","nodeName":"AddLogFields"},{"displayName":"Log Message (Business Exception)","nodeName":"LogMessage"},{"displayName":"Remove transaction log fields (Business Exception)","nodeName":"RemoveLogFields"}]}]},{"displayName":"System Exception","nodeName":"Sequence","annotation":"If a system exception occurs during the process, the transaction item\u0027s status is updated as Failed (Exception Type: Application).","items":[{"displayName":"Log Message (Consecutive exceptions)","nodeName":"LogMessage"},{"displayName":"Assign QueryRetry","nodeName":"Assign"},{"displayName":"Try taking screenshot","nodeName":"TryCatch","annotation":"Take a screenshot of the current state of the screen to facilitate debugging.","items":[{"displayName":"Invoke TakeScreenshot workflow","nodeName":"InvokeWorkflowFile"},{"nodeName":"Catch"}]},{"displayName":"If TransactionItem is a QueueItem (System Exception)","nodeName":"If","items":[{"displayName":"Retry Set Transaction Status (System Exception)","nodeName":"RetryScope"}]},{"displayName":"Add transaction log fields (System Exception)","nodeName":"AddLogFields"},{"displayName":"Increment consecutive exceptions counter","nodeName":"Assign"},{"displayName":"Invoke RetryCurrentTransaction workflow","nodeName":"InvokeWorkflowFile"},{"displayName":"Remove transaction log fields (System Exception)","nodeName":"RemoveLogFields"},{"displayName":"Try closing applications","nodeName":"TryCatch","annotation":"Close all applications before returning to the Initialization state and opening them again.\nIf applications cannot be closed, kill their respective processes.","items":[{"displayName":"Invoke CloseAllApplications workflow","nodeName":"InvokeWorkflowFile"},{"nodeName":"Catch"}]}]}]}]}]}},"lastModified":"2025-07-01T13:49:48Z"}