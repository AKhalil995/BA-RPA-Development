{"model":{"path":"Framework/GetTransactionData.xaml","arguments":[{"name":"in_TransactionNumber","type":"System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e","direction":"In"},{"name":"in_Config","type":"System.Collections.Generic.Dictionary\u00602[[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Object, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]], System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e","direction":"In"},{"name":"out_TransactionItem","type":"UiPath.Core.QueueItem, UiPath.System.Activities, Version=25.10.0.0, Culture=neutral, PublicKeyToken=null","direction":"Out","typeDefinitions":"namespace UiPath.Core { class QueueItem\r\n{\r\nlong? Id;\r\nstring Progress;\r\nDictionary\u003Cstring, object\u003E SpecificContent;\r\nstring Reference;\r\nstring QueueName;\r\nint RetryNo;\r\nQueueItemStatus Status;\r\nstring LastProcessingOn;\r\nGuid ItemKey;\r\nlong QueueDefinitionId;\r\nstring AssignedTo;\r\nQueueItemPriority Priority;\r\nbyte[] RowVersion;\r\nProcessingException ProcessingException;\r\nDateTime? StartTransactionTime;\r\nstring ReviewStatus;\r\nDictionary\u003Cstring, object\u003E Output;\r\nDateTime? DueDate;\r\nDateTime? DeferDate;\r\nstring ParentOperationId;\r\nGuid? UniqueKey;\r\n}\r\nenum QueueItemStatus\r\n{\r\nNew,\r\nInProgress,\r\nFailed,\r\nSuccessful,\r\nAbandoned,\r\nRetried,\r\nDeleted,\r\n}\r\nenum QueueItemPriority\r\n{\r\nHigh,\r\nNormal,\r\nLow,\r\n}\r\nclass ProcessingException\r\n{\r\nstring Reason;\r\nstring Details;\r\nProcessingExceptionType Type;\r\nstring AssociatedImageFilePath;\r\nlong Id;\r\nDateTime? CreationTime;\r\n}\r\n}"},{"name":"out_TransactionField1","type":"System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e","direction":"Out"},{"name":"out_TransactionField2","type":"System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e","direction":"Out"},{"name":"out_TransactionID","type":"System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e","direction":"Out"},{"name":"io_dt_TransactionData","type":"System.Data.DataTable, System.Data.Common, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a","direction":"InOut"}],"outline":{"displayName":"Get Transaction Data","nodeName":"Sequence","annotation":"Get a transaction item from a specified source (e.g., Orchestrator queues, spreadsheets, databases, mailboxes or web APIs). \n\nIf there are no transaction items remaining, out_TransactionItem is set to Nothing, which leads to the End Process state. \n\nFor cases in which there is only a single transaction (i.e., a linear process), use an If activity to check whether the argument in_TransactionNumber has the value 1 (meaning it is the first and only transaction) and assign the transaction item to out_TransactionItem. For any other value of in_TransactionNumber, out_TransactionItem should be set to Nothing.\n\nIf there are multiple transactions, use the argument in_TransactionNumber as an index to retrieve the correct transaction to be processed. If there are no more transactions left, it is necessary to set out_TransactionItem to Nothing, thus ending the process.","items":[{"displayName":"Log Message Get Transaction Item","nodeName":"LogMessage","items":[{"nodeName":"CSharpValue"}]},{"displayName":"Retry Get transaction item","nodeName":"RetryScope","items":[{"displayName":"Try Catch Get transaction item","nodeName":"TryCatch","items":[{"displayName":"Get transaction item","nodeName":"GetQueueItem","annotation":"Get a transaction item from the specified Orchestrator queue.\nIf queues are not used in this process, replace this activity with the appropriated logic to retrieve transaction items.\nFor example, if transactions are rows from a DataTable, the row corresponding to the current transaction is retrieved at this point.","items":[{"nodeName":"CSharpValue"},{"nodeName":"CSharpValue"},{"nodeName":"CSharpReference"}]},{"nodeName":"Catch","items":[{"displayName":"Catch Get transaction item","nodeName":"Sequence","items":[{"displayName":"Log Message Get transaction item faulted","nodeName":"LogMessage"},{"displayName":"Rethrow Get transaction item faulted","nodeName":"Rethrow"}]}]}]},{"nodeName":"CSharpValue"}]},{"displayName":"If a new transaction item is retrieved, get additional information about it","nodeName":"If","annotation":"This optional step can be used to include more information about a transaction item and it is used mainly for logging and visualization purposes.\nFor example, if transaction items are invoices, then out_TransactionID can be the invoice number, out_TransactionField1 can be the invoice date and out_TransactionField2 can be the invoice amount.","items":[{"nodeName":"CSharpValue"},{"displayName":"Add transaction information to log fields","nodeName":"Sequence","annotation":"Write data to the added log fields that identify the transaction.","items":[{"displayName":"Assign out_TransactionID","nodeName":"Assign","items":[{"nodeName":"CSharpReference"},{"nodeName":"CSharpValue"}]},{"displayName":"Assign out_TransactionField1","nodeName":"Assign","items":[{"nodeName":"CSharpReference"},{"nodeName":"CSharpValue"}]},{"displayName":"Assign out_TransactionField2","nodeName":"Assign","items":[{"nodeName":"CSharpReference"},{"nodeName":"CSharpValue"}]}]},{"displayName":"Else","nodeName":"Sequence"}]}]}},"lastModified":"2025-07-01T13:49:48Z"}